# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/

user nginx;
worker_processes 2;
# disable daemon
daemon off;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
#error_log  /var/log/nginx/error.log  crit;
error_log /dev/stdout info;
pid nginx.pid;

events {
  worker_connections 2048;
}

http {
  include mime.types;
  default_type application/octet-stream;

  log_format main '$remote_addr - $remote_user [$time_local] "$request" '
  '$status $body_bytes_sent $upstream_response_time "$http_referer" '
  '"$http_user_agent" "$http_x_forwarded_for"';


  access_log on;
  access_log /dev/stdout main;

  limit_conn_log_level info;

  sendfile off;
  #tcp_nopush	 on;

  reset_timedout_connection on;

  server_tokens off;

  keepalive_timeout 75s;
  client_header_timeout 75s;

  gzip on;
  gzip_types text/plain text/css application/javascript image/png image/jpeg application/octet-stream;
  gzip_min_length 1000;

  underscores_in_headers on;

  upstream v1_upstream {
    # The keepalive parameter sets the maximum number of idle keepalive connections
    # to upstream servers that are preserved in the cache of each worker process. When
    # this number is exceeded, the least recently used connections are closed.
    keepalive 100;
    server 127.0.0.1:8881;
  }
  upstream v2_upstream {
    keepalive 100;
    server 127.0.0.1:8882;
  }
  upstream replica_upstream {
    keepalive 100;
    server 127.0.0.1:${REPLICA_PORT};
  }
  # This is to serve TCP health-check of AWS Network Load Balancers (NLB)
  server {
    listen 480;
    access_log off;
    error_log /dev/null;
    return 200 "OK\n";
  }

  server {
    listen ${SERVER_PORT};
    server_name localhost;
    client_max_body_size 10M;
    client_body_buffer_size 1M;

    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    # enable this if and only if you use HTTPS
    # proxy_set_header X-Forwarded-Proto https;

    # This is to serve HTTP health-check of AWS Elastic Load Balancers (ELB)
    location /public/graphql/health {
      access_log off;
      # error_log /dev/null;
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;
      expires off;
      proxy_connect_timeout   5;
      proxy_send_timeout      5;
      proxy_read_timeout      5;
      proxy_pass http://v1_upstream/healthz?strict=true;
    }

    location /static/ {
      root /var/www/html;
    }

    location = /public/graphql/v1 {
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
      proxy_set_header Host $host;
      proxy_redirect off;
      expires off;
      proxy_connect_timeout   10;
      proxy_send_timeout      20;
      proxy_read_timeout      40;
      proxy_pass http://v1_upstream/v1/graphql;
    }

    location ~ ^/public/graphql/rest/v1/(.+)$ {
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
      proxy_set_header Host $host;
      proxy_redirect off;
      expires off;
      proxy_connect_timeout   10;
      proxy_send_timeout      20;
      proxy_read_timeout      40;
      proxy_pass http://v1_upstream/api/rest/$1$is_args$args;
    }

    location = /public/graphql/readonly/v1{
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
      proxy_set_header Host $host;
      proxy_redirect off;
      expires off;
      proxy_connect_timeout   10;
      proxy_send_timeout      20;
      proxy_read_timeout      40;
      proxy_pass http://replica_upstream/v1/graphql;
    }

    location ~ ^/public/graphql/readonly/rest/v1/(.+)$ {
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
      proxy_set_header Host $host;
      proxy_redirect off;
      expires off;
      proxy_connect_timeout   10;
      proxy_send_timeout      20;
      proxy_read_timeout      40;
      proxy_pass http://replica_upstream/api/rest/$1$is_args$args;
    }
  }

  server {
    listen ${SERVER_PORT};
    server_name console.*;
    client_max_body_size 100M;
    client_body_buffer_size 10M;

    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    # enable this if and only if you use HTTPS
    # proxy_set_header X-Forwarded-Proto https;

    location /static/ {
      root /var/www/html;
    }

    location / {
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
      proxy_set_header Host $host;
      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;
      expires off;
      proxy_pass http://v1_upstream/;
    }
  }
}